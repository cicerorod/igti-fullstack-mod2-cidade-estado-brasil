
(X) criar pasta para o projeto;
(X) usar innit para criar projeto (vai criar o package.json);
() salvar os 2 JSON na pasta;
(X) criar o index.js (ele vai ser o local de construção da aplicação);
() instalar o fs pelo npm dentro do código e usar o require para chamar;
() usar JSON.parse para converter string para Json ou vice versa (a classe Json tem vários metédos úteis, vale a leitura);
() criar as functions com cada operação, usando, basicamente, os métodos de manipulação de arrays aprendidos no modulo anterior e a lógica de programação mesmo;
() chamar as functions individualmente, para poder colher as respostas pelo console, usando console.log.



TRABALHO

O aluno deverá baixar os arquivos Cidades.json e Estados.json do link a seguir (https://github.com/felipefdl/cidades-estados-brasil-json (Links para um site externo.)) e colocá-los dentro do seu projeto. O arquivo Estados.json possui uma listagem com todos os estados do Brasil, cada um representado por um ID. No arquivo Cidades.json estão listadas todas as cidades do Brasil, com seu respectivo estado representando pelo ID fazendo referência ao arquivo Estados.json.

O aluno deverá desempenhar as seguintes atividades:

1 (X) Implementar um método que irá criar um arquivo JSON para cada estado representado 
no arquivo Estados.json, e o seu conteúdo será um array das cidades pertencentes
aquele estado, de acordo com o arquivo Cidades.json. O nome do arquivo deve ser 
o UF do estado, por exemplo: MG.json.

2 (X) Criar um método que recebe como parâmetro o UF do estado, realize a leitura do arquivo JSON correspondente e retorne a quantidade de cidades daquele estado.
3 (x) Criar um método que imprima no console um array com o UF dos cinco estados que mais 
possuem cidades, seguidos da quantidade, em ordem decrescente. 
Utilize o método criado no tópico anterior. 
Exemplo de impressão: [“UF - 93”, “UF - 82”, “UF - 74”, “UF - 72”, “UF - 65”]
4 (x) Criar um método que imprima no console um array com o UF dos cinco estados que menos possuem cidades, seguidos da quantidade, em ordem decrescente. Utilize o método criado no tópico anterior. Exemplo de impressão: [“UF - 30”, “UF - 27”, “UF - 25”, “UF - 23”, “UF - 21”]
5 (x) Criar um método que imprima no console um array com a cidade de maior nome de cada estado, seguida de seu UF. Em caso de empate, considerar a ordem alfabética para ordená-los e então retornar o primeiro. Por exemplo: [“Nome da Cidade – UF”, “Nome da Cidade – UF”, ...].
6 (x) Criar um método que imprima no console um array com a cidade de menor nome de cada estado, seguida de seu UF. Em caso de empate, considerar a ordem alfabética para ordená-los e então retorne o primeiro. Por exemplo: [“Nome da Cidade – UF”, “Nome da Cidade – UF”, ...].
7 (x) Criar um método que imprima no console a cidade de maior nome entre todos os estados, seguido do seu UF. Em caso de empate, considerar a ordem alfabética para ordená-los e então retornar o primeiro. Exemplo: “Nome da Cidade - UF".
8 () Criar um método que imprima no console a cidade de menor nome entre todos os estados, seguido do seu UF. Em caso de empate, considerar a ordem alfabética para ordená-los e então retornar o primeiro. Exemplo: “Nome da Cidade - UF".
9 () O projeto ao ser executado, deve realizar os cinco métodos em sequência, imprimindo os resultados em console e depois finalizando a execução.